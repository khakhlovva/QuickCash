// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["reactNative"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  incomes  Income[]
  accounts Account[]
  expense  Expense[]
  savings  Saving[]
  logs     Log[]
}

model Income {
  id       String @id @default(cuid())
  title    String
  quantity Float  @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id       String @id @default(cuid())
  title    String
  quantity Float  @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id       String @id @default(cuid())
  title    String
  quantity Float  @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Saving {
  id       String @id @default(cuid())
  title    String
  quantity Float  @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OperationType {
  INCOME
  ACCOUNT
  EXPENSE
  SAVING
}

model Log {
  id            String        @id @default(cuid())
  operationType OperationType
  sectionName   String
  quantity      Float

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
